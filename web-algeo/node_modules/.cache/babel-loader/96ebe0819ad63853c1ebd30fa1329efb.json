{"ast":null,"code":"import { useEnvironment } from \"@chakra-ui/react-env\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\n\nexport function useMediaQuery(query) {\n  var env = useEnvironment();\n  var queries = Array.isArray(query) ? query : [query];\n  var isSupported = isBrowser && \"matchMedia\" in env.window;\n  var [matches, setMatches] = React.useState(queries.map(query => isSupported ? !!env.window.matchMedia(query).matches : false));\n  useSafeLayoutEffect(() => {\n    if (!isSupported) return undefined;\n    var mediaQueryList = queries.map(query => env.window.matchMedia(query));\n    var listenerList = mediaQueryList.map(() => {\n      var listener = () => {\n        var isEqual = (prev, curr) => prev.length === curr.length && prev.every((elem, idx) => elem === curr[idx]);\n\n        var currentMatches = mediaQueryList.map(mediaQuery => mediaQuery.matches);\n\n        if (!isEqual(matches, currentMatches)) {\n          setMatches(currentMatches);\n        }\n      };\n\n      env.window.addEventListener(\"resize\", listener);\n      return listener;\n    });\n    return () => {\n      mediaQueryList.forEach((_, index) => {\n        env.window.removeEventListener(\"resize\", listenerList[index]);\n      });\n    };\n  }, [query]);\n  return matches;\n}","map":{"version":3,"sources":["../../src/use-media-query.ts"],"names":["useSafeLayoutEffect","isBrowser","React","env","useEnvironment","queries","Array","isSupported","query","mediaQueryList","listenerList","listener","isEqual","prev","curr","elem","currentMatches","mediaQuery","setMatches"],"mappings":"AAAA,SAAA,cAAA,QAAA,sBAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,IAAMA,mBAAmB,GAAGC,SAAS,GAAGC,KAAK,CAAR,eAAA,GAA2BA,KAAK,CAArE,SAAA;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,aAAA,CAAA,KAAA,EAA4D;AACjE,MAAMC,GAAG,GAAGC,cAAZ,EAAA;AACA,MAAMC,OAAO,GAAGC,KAAK,CAALA,OAAAA,CAAAA,KAAAA,IAAAA,KAAAA,GAA+B,CAA/C,KAA+C,CAA/C;AACA,MAAMC,WAAW,GAAGN,SAAS,IAAI,gBAAgBE,GAAG,CAApD,MAAA;AAEA,MAAM,CAAA,OAAA,EAAA,UAAA,IAAwBD,KAAK,CAALA,QAAAA,CAC5BG,OAAO,CAAPA,GAAAA,CAAaG,KAAD,IACVD,WAAW,GAAG,CAAC,CAACJ,GAAG,CAAHA,MAAAA,CAAAA,UAAAA,CAAAA,KAAAA,EAAL,OAAA,GAFf,KACEE,CAD4BH,CAA9B;AAMAF,EAAAA,mBAAmB,CAAC,MAAM;AACxB,QAAI,CAAJ,WAAA,EAAkB,OAAA,SAAA;AAElB,QAAMS,cAAc,GAAGJ,OAAO,CAAPA,GAAAA,CAAaG,KAAD,IAAWL,GAAG,CAAHA,MAAAA,CAAAA,UAAAA,CAA9C,KAA8CA,CAAvBE,CAAvB;AAEA,QAAMK,YAAY,GAAG,cAAc,CAAd,GAAA,CAAmB,MAAM;AAC5C,UAAMC,QAAQ,GAAG,MAAM;AACrB,YAAMC,OAAO,GAAG,CAAA,IAAA,EAAA,IAAA,KACdC,IAAI,CAAJA,MAAAA,KAAgBC,IAAI,CAApBD,MAAAA,IACAA,IAAI,CAAJA,KAAAA,CAAW,CAAA,IAAA,EAAA,GAAA,KAAeE,IAAI,KAAKD,IAAI,CAFzC,GAEyC,CAAvCD,CAFF;;AAIA,YAAMG,cAAc,GAAGP,cAAc,CAAdA,GAAAA,CACpBQ,UAAD,IAAgBA,UAAU,CAD5B,OAAuBR,CAAvB;;AAIA,YAAI,CAACG,OAAO,CAAA,OAAA,EAAZ,cAAY,CAAZ,EAAuC;AACrCM,UAAAA,UAAU,CAAVA,cAAU,CAAVA;AACD;AAXH,OAAA;;AAcAf,MAAAA,GAAG,CAAHA,MAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;AAEA,aAAA,QAAA;AAjBF,KAAqB,CAArB;AAoBA,WAAO,MAAM;AACXM,MAAAA,cAAc,CAAdA,OAAAA,CAAuB,CAAA,CAAA,EAAA,KAAA,KAAc;AACnCN,QAAAA,GAAG,CAAHA,MAAAA,CAAAA,mBAAAA,CAAAA,QAAAA,EAAyCO,YAAY,CAArDP,KAAqD,CAArDA;AADFM,OAAAA;AADF,KAAA;AAzBiB,GAAA,EA8BhB,CA9BHT,KA8BG,CA9BgB,CAAnBA;AAgCA,SAAA,OAAA;AACD","sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nconst useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\nexport function useMediaQuery(query: string | string[]): boolean[] {\n  const env = useEnvironment()\n  const queries = Array.isArray(query) ? query : [query]\n  const isSupported = isBrowser && \"matchMedia\" in env.window\n\n  const [matches, setMatches] = React.useState(\n    queries.map((query) =>\n      isSupported ? !!env.window.matchMedia(query).matches : false,\n    ),\n  )\n\n  useSafeLayoutEffect(() => {\n    if (!isSupported) return undefined\n\n    const mediaQueryList = queries.map((query) => env.window.matchMedia(query))\n\n    const listenerList = mediaQueryList.map(() => {\n      const listener = () => {\n        const isEqual = (prev: boolean[], curr: boolean[]) =>\n          prev.length === curr.length &&\n          prev.every((elem, idx) => elem === curr[idx])\n\n        const currentMatches = mediaQueryList.map(\n          (mediaQuery) => mediaQuery.matches,\n        )\n\n        if (!isEqual(matches, currentMatches)) {\n          setMatches(currentMatches)\n        }\n      }\n\n      env.window.addEventListener(\"resize\", listener)\n\n      return listener\n    })\n\n    return () => {\n      mediaQueryList.forEach((_, index) => {\n        env.window.removeEventListener(\"resize\", listenerList[index])\n      })\n    }\n  }, [query])\n\n  return matches\n}\n"]},"metadata":{},"sourceType":"module"}