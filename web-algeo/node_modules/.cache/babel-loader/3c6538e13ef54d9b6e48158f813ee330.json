{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var Switch = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Switch\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    spacing = \"0.5rem\",\n    children\n  } = _omitThemingProps,\n      ownProps = _objectWithoutPropertiesLoose(_omitThemingProps, [\"spacing\", \"children\"]);\n\n  var {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps\n  } = useCheckbox(ownProps);\n  var containerStyles = React.useMemo(() => _extends({\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    lineHeight: \"normal\"\n  }, styles.container), [styles.container]);\n  var trackStyles = React.useMemo(() => _extends({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\"\n  }, styles.track), [styles.track]);\n  var labelStyles = React.useMemo(() => _extends({\n    userSelect: \"none\",\n    marginStart: spacing\n  }, styles.label), [spacing, styles.label]);\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, getRootProps(), {\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles\n  }), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-switch__input\"\n  }, getInputProps({}, ref))), /*#__PURE__*/React.createElement(chakra.span, _extends({}, getCheckboxProps(), {\n    className: \"chakra-switch__track\",\n    __css: trackStyles\n  }), /*#__PURE__*/React.createElement(chakra.span, {\n    __css: styles.thumb,\n    className: \"chakra-switch__thumb\",\n    \"data-checked\": dataAttr(state.isChecked),\n    \"data-hover\": dataAttr(state.isHovered)\n  })), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-switch__label\"\n  }, getLabelProps(), {\n    __css: labelStyles\n  }), children));\n});\n\nif (__DEV__) {\n  Switch.displayName = \"Switch\";\n}","map":{"version":3,"sources":["../../src/switch.tsx"],"names":["Switch","forwardRef","styles","useMultiStyleConfig","spacing","children","ownProps","omitThemingProps","getLabelProps","useCheckbox","containerStyles","display","position","verticalAlign","lineHeight","trackStyles","flexShrink","justifyContent","boxSizing","cursor","labelStyles","userSelect","marginStart","getRootProps","cx","props","getInputProps","getCheckboxProps","dataAttr","state"],"mappings":"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","sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@chakra-ui/checkbox\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SwitchProps\n  extends Omit<UseCheckboxProps, \"isIndeterminate\">,\n    Omit<HTMLChakraProps<\"label\">, keyof UseCheckboxProps>,\n    ThemingProps<\"Switch\"> {\n  /**\n   * The spacing between the switch and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n}\n\nexport const Switch = forwardRef<SwitchProps, \"input\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Switch\", props)\n\n  const { spacing = \"0.5rem\", children, ...ownProps } = omitThemingProps(props)\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps,\n  } = useCheckbox(ownProps)\n\n  const containerStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: \"normal\",\n      ...styles.container,\n    }),\n    [styles.container],\n  )\n\n  const trackStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\",\n      ...styles.track,\n    }),\n    [styles.track],\n  )\n\n  const labelStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      userSelect: \"none\",\n      marginStart: spacing,\n      ...styles.label,\n    }),\n    [spacing, styles.label],\n  )\n\n  return (\n    <chakra.label\n      {...getRootProps()}\n      className={cx(\"chakra-switch\", props.className)}\n      __css={containerStyles}\n    >\n      <input className=\"chakra-switch__input\" {...getInputProps({}, ref)} />\n      <chakra.span\n        {...getCheckboxProps()}\n        className=\"chakra-switch__track\"\n        __css={trackStyles}\n      >\n        <chakra.span\n          __css={styles.thumb}\n          className=\"chakra-switch__thumb\"\n          data-checked={dataAttr(state.isChecked)}\n          data-hover={dataAttr(state.isHovered)}\n        />\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-switch__label\"\n          {...getLabelProps()}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  Switch.displayName = \"Switch\"\n}\n"]},"metadata":{},"sourceType":"module"}